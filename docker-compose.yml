version: '3.8'

services:
  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      target: development
    command: npm run start:dev api-gateway
    env_file:
      - ./apps/api-gateway/.env
    ports:
      - "4000:3000"
    restart: always
    networks:
      - app-network
    volumes:
      - .:/usr/src/app
      - ./proto/:/usr/src/app/proto
      - node_modules:/usr/src/app/node_modules
    depends_on:
      - nats-jetstream
      - redis

  authentication:
    container_name: authentication
    build:
      context: .
      dockerfile: ./apps/authentication/Dockerfile
      target: development
    command: npm run start:dev authentication
    env_file:
      - ./apps/authentication/.env
    ports:
      - "50051:50051"
    networks:
      - app-network
    volumes:
      - .:/usr/src/app
      - ./proto/:/usr/src/app/proto
      - node_modules:/usr/src/app/node_modules
    depends_on:
      - nats-jetstream
  inventory:
    container_name: inventory
    build:
      context: .
      dockerfile: ./apps/inventory/Dockerfile
      target: development
    command: npm run start:dev inventory
    env_file:
      - ./apps/inventory/.env
    ports:
      - "50052:50051"
    networks:
      - app-network
    volumes:
      - .:/usr/src/app
      - ./proto/:/usr/src/app/proto
      - node_modules:/usr/src/app/node_modules
    depends_on:
      - nats-jetstream
  # order:
  #   container_name: order
  #   build:
  #     context: .
  #     dockerfile: ./apps/order/Dockerfile
  #     target: development
  #   command: npm run start:dev order
  #   env_file:
  #     - ./apps/order/.env
  #   ports:
  #     - "50053:50051"
  #   networks:
  #     - app-network
  #   volumes:
  #     - .:/usr/src/app
  #     - ./proto/:/usr/src/app/proto
  #     - node_modules:/usr/src/app/node_modules
  #   depends_on:
  #     - nats-jetstream
  # payment:
  #   container_name: payment
  #   build:
  #     context: .
  #     dockerfile: ./apps/payment/Dockerfile
  #     target: development
  #   command: npm run start:dev payment
  #   env_file:
  #     - ./apps/payment/.env
  #   ports:
  #     - "50054:50051"
  #   networks:
  #     - app-network
  #   volumes:
  #     - .:/usr/src/app
  #     - ./proto/:/usr/src/app/proto
  #     - node_modules:/usr/src/app/node_modules
  #   depends_on:
  #     - nats-jetstream


  
  # postgres:
  #   container_name: postgres
  #   image: postgres:12.7
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - postgres-net
  #   environment:
  #     POSTGRES_DB: todos
  #     POSTGRES_USER: mohamad
  #     POSTGRES_PASSWORD: hasan
  #   volumes:
  #     - "postgres_data:/var/lib/postgresql/data"
  nats-jetstream:
    image: nats
    ports:
      - "4222:4222"   # NATS client port
      - "8222:8222"   # Monitoring port
    command: ["-js"]
    networks:
      - app-network
  primary:
    image: mongo:5.0
    container_name: primary
    ports:
      - 27017:27017
    # environment:
    #   - MONGO_INITDB_ROOT_USERNAME=root
    #   - MONGO_INITDB_ROOT_PASSWORD=example
    volumes:
      - primary_data:/data/db
    networks:
      - app-network
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
  redis:
    container_name: redis
    image: redis
    restart: always
    ports:
      - '6379:6379'
    networks:
      - app-network
  secondary:
    image: mongo:5.0
    container_name: secondary
    ports:
      - 27018:27017
    # environment:
    #   - MONGO_INITDB_ROOT_USERNAME=root
    #   - MONGO_INITDB_ROOT_PASSWORD=example
    volumes:
      - secondary_data:/data/db
    networks:
      - app-network
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
  # mongo-express:
  #   image: mongo-express:latest
  #   container_name: mongo-express
  #   ports:
  #     - 8081:8081
  #   environment:
  #     # - ME_CONFIG_MONGODB_ADMINUSERNAME=root
  #     # - ME_CONFIG_MONGODB_ADMINPASSWORD=example
  #     - ME_CONFIG_MONGODB_SERVER=primary
  #   networks:
  #     - mongo-cluster-network

networks:
  app-network:
    driver: bridge

volumes: 
  # postgres_data:
  node_modules:
  primary_data:
  secondary_data:

# rs.initiate({
#   _id: "dbrs",
#   members: [
#     { _id: 0, host: "primary:27017" },
#     { _id: 1, host: "secondary:27017" }
#   ]
# })

