version: '3.8'

services:
  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      target: development
    command: npm run start:dev api-gateway
    env_file:
      - ./apps/api-gateway/.env
    ports:
      - "4000:3000"
    restart: always
    networks:
      - app-network
    volumes:
      - .:/usr/src/app
      - ./proto/:/usr/src/app/dist/proto
      - node_modules:/usr/src/app/node_modules
    depends_on:
      - kafka
      - redis

  authentication:
    container_name: authentication
    build:
      context: .
      dockerfile: ./apps/authentication/Dockerfile
      target: development
    command: npm run start:dev authentication
    env_file:
      - ./apps/authentication/.env
    ports:
      - "50051:50051"
    networks:
      - app-network
    volumes:
      - .:/usr/src/app
      - ./proto/:/usr/src/app/dist/proto
      - node_modules:/usr/src/app/node_modules
    depends_on:
      - kafka
  inventory:
    container_name: inventory
    build:
      context: .
      dockerfile: ./apps/inventory/Dockerfile
      target: development
    command: npm run start:dev inventory
    env_file:
      - ./apps/inventory/.env
    ports:
      - "50052:50051"
    networks:
      - app-network
    volumes:
      - .:/usr/src/app
      - ./proto/:/usr/src/app/dist/proto
      - node_modules:/usr/src/app/node_modules
    depends_on:
      - kafka
      - postgres-master
      - postgres-replica1
      - postgres-replica2
  order:
    container_name: order
    build:
      context: .
      dockerfile: ./apps/order/Dockerfile
      target: development
    command: npm run start:dev order
    env_file:
      - ./apps/order/.env
    ports:
      - "50053:50051"
    networks:
      - app-network
    volumes:
      - .:/usr/src/app
      - ./proto/:/usr/src/app/dist/proto
      - node_modules:/usr/src/app/node_modules
    depends_on:
      - kafka
  payment:
    container_name: payment
    build:
      context: .
      dockerfile: ./apps/payment/Dockerfile
      target: development
    command: npm run start:dev payment
    env_file:
      - ./apps/payment/.env
    ports:
      - "50054:50051"
    networks:
      - app-network
    volumes:
      - .:/usr/src/app
      - ./proto/:/usr/src/app/dist/proto
      - node_modules:/usr/src/app/node_modules
    depends_on:
      - kafka


  
  postgres-master:
    image: postgres:12.7
    container_name: postgres-master
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: master_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-master-data:/var/lib/postgresql/data
    command: postgres -c wal_level=replica -c max_wal_senders=3 -c max_replication_slots=3
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - app-network

  postgres-replica1:
    image: postgres:12.7
    container_name: postgres-replica1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres-replica1-data:/var/lib/postgresql/data
    depends_on:
      - postgres-master
    command: |
      bash -c "until pg_basebackup -h postgres-master -D /var/lib/postgresql/data -U postgres -vP -R -W; do sleep 1; done && postgres"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - app-network

  postgres-replica2:
    image: postgres:12.7
    container_name: postgres-replica2
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - postgres-replica2-data:/var/lib/postgresql/data
    depends_on:
      - postgres-master
    command: |
      bash -c "until pg_basebackup -h postgres-master -D /var/lib/postgresql/data -U postgres -vP -R -W; do sleep 1; done && postgres"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - app-network



  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app-network
  primary:
    image: mongo:5.0
    container_name: primary
    ports:
      - 27017:27017
    # environment:
    #   - MONGO_INITDB_ROOT_USERNAME=root
    #   - MONGO_INITDB_ROOT_PASSWORD=example
    volumes:
      - primary_data:/data/db
    networks:
      - app-network
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
  redis:
    container_name: redis
    image: redis
    restart: always
    ports:
      - '6379:6379'
    networks:
      - app-network
  secondary:
    image: mongo:5.0
    container_name: secondary
    ports:
      - 27018:27017
    # environment:
    #   - MONGO_INITDB_ROOT_USERNAME=root
    #   - MONGO_INITDB_ROOT_PASSWORD=example
    volumes:
      - secondary_data:/data/db
    networks:
      - app-network
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
  # mongo-express:
  #   image: mongo-express:latest
  #   container_name: mongo-express
  #   ports:
  #     - 8081:8081
  #   environment:
  #     # - ME_CONFIG_MONGODB_ADMINUSERNAME=root
  #     # - ME_CONFIG_MONGODB_ADMINPASSWORD=example
  #     - ME_CONFIG_MONGODB_SERVER=primary
  #   networks:
  #     - mongo-cluster-network

networks:
  app-network:
    driver: bridge

volumes: 
  node_modules:
  primary_data:
  secondary_data:
  postgres-master-data:
  postgres-replica1-data:
  postgres-replica2-data:

# rs.initiate({
#   _id: "dbrs",
#   members: [
#     { _id: 0, host: "primary:27017" },
#     { _id: 1, host: "secondary:27017" }
#   ]
# })

